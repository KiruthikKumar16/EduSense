import { useState, useEffect } from 'react'
import { useAuth } from '../contexts/AuthContext'
import { useRouter } from 'next/router'
import { 
  BookOpen, 
  Upload, 
  FileText, 
  Brain, 
  Plus,
  Search,
  Filter,
  Grid,
  List
} from 'lucide-react'
import FileUpload from '../components/FileUpload'
import MaterialLibrary from '../components/MaterialLibrary'
import MaterialAnalysis from '../components/MaterialAnalysis'
import toast from 'react-hot-toast'

export default function Materials() {
  const { user, loading } = useAuth()
  const router = useRouter()
  
  const [materials, setMaterials] = useState([])
  const [selectedMaterial, setSelectedMaterial] = useState(null)
  const [showUpload, setShowUpload] = useState(false)
  const [loadingMaterials, setLoadingMaterials] = useState(true)

  useEffect(() => {
    if (user) {
      loadMaterials()
    }
  }, [user])

  const loadMaterials = async () => {
    try {
      setLoadingMaterials(true)
      
      // First try to get materials from localStorage (recently uploaded)
      const storedMaterials = localStorage.getItem('uploadedMaterials')
      let localMaterials = []
      if (storedMaterials) {
        localMaterials = JSON.parse(storedMaterials)
      }
      
      // Then try to get materials from API
      try {
        const response = await fetch('/api/materials-services?service=search')
        const data = await response.json()
        
        if (data.success && data.materials) {
          // Combine local and API materials
          const allMaterials = [...localMaterials, ...data.materials]
          setMaterials(allMaterials)
        } else {
          // Use local materials if API fails
          setMaterials(localMaterials.length > 0 ? localMaterials : getDemoMaterials())
        }
      } catch (apiError) {
        console.error('API error, using local materials:', apiError)
        setMaterials(localMaterials.length > 0 ? localMaterials : getDemoMaterials())
      }
    } catch (error) {
      console.error('Error loading materials:', error)
      setMaterials(getDemoMaterials())
    } finally {
      setLoadingMaterials(false)
    }
  }

  const getDemoMaterials = () => [
    {
      id: 'demo-1',
      filename: 'Calculus Fundamentals.pdf',
      content: 'Calculus is the mathematical study of continuous change...',
      ai_analysis: {
        summary: 'Introduction to calculus concepts including derivatives and integrals',
        key_topics: ['derivatives', 'integrals', 'limits'],
        subject_category: 'mathematics',
        difficulty_level: 'intermediate',
        learning_objectives: ['Understand derivatives', 'Master integration techniques'],
        key_concepts: ['Rate of change', 'Area under curve', 'Fundamental theorem'],
        suggested_quiz_questions: [
          {
            question: 'What is the derivative of x²?',
            difficulty: 'easy',
            topic: 'derivatives'
          }
        ],
        study_recommendations: ['Practice derivative rules', 'Work through integration examples']
      },
      word_count: 1500,
      created_at: '2024-01-15T10:00:00Z'
    },
    {
      id: 'demo-2',
      filename: 'World War II History.docx',
      content: 'World War II was a global war that lasted from 1939 to 1945...',
      ai_analysis: {
        summary: 'Comprehensive overview of World War II events and impact',
        key_topics: ['battles', 'politics', 'economics'],
        subject_category: 'history',
        difficulty_level: 'intermediate',
        learning_objectives: ['Understand war causes', 'Analyze war impact'],
        key_concepts: ['Alliance systems', 'Economic factors', 'Political ideologies'],
        suggested_quiz_questions: [
          {
            question: 'When did World War II begin?',
            difficulty: 'easy',
            topic: 'timeline'
          }
        ],
        study_recommendations: ['Study timeline of events', 'Analyze causes and effects']
      },
      word_count: 2000,
      created_at: '2024-01-14T15:30:00Z'
    }
  ]

  const handleFileUpload = (uploadResult) => {
    console.log('File uploaded:', uploadResult)
    toast.success('Material uploaded and analyzed successfully!')
    
    // Reload materials to get the latest data including localStorage
    loadMaterials()
    setShowUpload(false)
  }

  const handleMaterialSelect = (material) => {
    setSelectedMaterial(material)
  }

  const handleGenerateQuiz = async (material) => {
    try {
      // Show loading state
      toast.loading('Generating quiz from material...', { id: 'quiz-generation' })
      
      // Store material data for quiz generation with full content
      const quizData = {
        id: material.id,
        title: `${material.filename} Quiz`,
        topic: material.ai_analysis?.subject_category || 'General',
        difficulty: material.ai_analysis?.difficulty_level || 'intermediate',
        timeLimit: 30,
        questions: [], // Will be generated by AI
        materialContent: material.content, // Pass the actual content
        aiAnalysis: material.ai_analysis, // Pass the AI analysis
        suggestedQuestions: material.ai_analysis?.suggested_quiz_questions || [] // Use AI-suggested questions
      }
      
      localStorage.setItem('materialQuiz', JSON.stringify(quizData))
      
      // Navigate to quiz page
      router.push('/quiz')
      
      toast.success('Quiz generated from material!', { id: 'quiz-generation' })
    } catch (error) {
      console.error('Error generating quiz:', error)
      toast.error('Failed to generate quiz from material', { id: 'quiz-generation' })
    }
  }

  const handleMaterialDelete = (material) => {
    if (confirm(`Are you sure you want to delete "${material.filename}"?`)) {
      setMaterials(prev => prev.filter(m => m.id !== material.id))
      if (selectedMaterial?.id === material.id) {
        setSelectedMaterial(null)
      }
      toast.success('Material deleted successfully')
    }
  }

  const handleMaterialEdit = (material) => {
    // Implement material editing
    console.log('Edit material:', material)
    toast.info('Material editing feature coming soon!')
  }


  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center transition-colors duration-300">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-indigo-600 dark:border-indigo-400"></div>
      </div>
    )
  }

  if (!user) {
    router.push('/auth')
    return null
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 transition-colors duration-300">
      {/* Header */}
      <header className="bg-white dark:bg-gray-800 shadow-sm border-b dark:border-gray-700 transition-colors duration-300">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-6">
            <div className="flex items-center">
              <BookOpen className="h-8 w-8 text-indigo-600 dark:text-indigo-400" />
              <span className="ml-2 text-2xl font-bold text-gray-900 dark:text-gray-100">Study Materials</span>
            </div>
            <div className="flex items-center space-x-4">
              <button
                onClick={() => setShowUpload(!showUpload)}
                className="flex items-center px-4 py-2 bg-indigo-600 dark:bg-indigo-500 text-white rounded-md hover:bg-indigo-700 dark:hover:bg-indigo-600 transition-colors"
              >
                <Plus className="h-4 w-4 mr-2" />
                Upload Material
              </button>
              <button
                onClick={() => router.push('/')}
                className="text-indigo-600 dark:text-indigo-400 hover:text-indigo-500 dark:hover:text-indigo-300 font-medium transition-colors"
              >
                Back to Dashboard
              </button>
            </div>
          </div>
        </div>
      </header>

      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {showUpload ? (
          /* Upload Section */
          <div className="space-y-6">
            <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6 transition-colors duration-300">
              <h2 className="text-xl font-semibold text-gray-900 dark:text-gray-100 mb-4">Upload New Material</h2>
              <FileUpload onFileUpload={handleFileUpload} />
            </div>
            
            <button
              onClick={() => setShowUpload(false)}
              className="text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200 transition-colors"
            >
              ← Back to Materials Library
            </button>
          </div>
        ) : (
          /* Main Content */
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            {/* Materials Library */}
            <div className="lg:col-span-2">
              {loadingMaterials ? (
                <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-8 text-center">
                  <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600 mx-auto mb-4"></div>
                  <p className="text-gray-600">Loading materials...</p>
                </div>
              ) : (
                <MaterialLibrary
                  materials={materials}
                  onMaterialSelect={handleMaterialSelect}
                  onMaterialDelete={handleMaterialDelete}
                  onMaterialEdit={handleMaterialEdit}
                />
              )}
            </div>

            {/* Material Analysis */}
            <div className="lg:col-span-1">
              {selectedMaterial ? (
                <MaterialAnalysis
                  material={selectedMaterial}
                  onGenerateQuiz={handleGenerateQuiz}
                />
              ) : (
                <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 text-center">
                  <Brain className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-gray-900 mb-2">Select a Material</h3>
                  <p className="text-gray-500">
                    Choose a material from the library to view its AI analysis and generate quizzes
                  </p>
                </div>
              )}
            </div>
          </div>
        )}
      </main>
    </div>
  )
}
